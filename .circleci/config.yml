# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/configuration-reference
version: 2.1

# Orbs are reusable packages of CircleCI configuration that you may share across projects, enabling you to create encapsulated, parameterized commands, jobs, and executors that can be used across multiple projects.
# See: https://circleci.com/docs/orb-intro/
orbs:
  # The python orb contains a set of prepackaged CircleCI configuration you can use repeatedly in your configuration files
  # Orb commands and jobs help you with common scripting around a language/tool
  # so you dont have to copy and paste it everywhere.
  # See the orb documentation here: https://circleci.com/developer/orbs/orb/circleci/python
  slack: circleci/slack@4.12.5

# Define a job to be invoked later in a workflow.
# See: https://circleci.com/docs/configuration-reference/#jobs
jobs:
  build-and-test: # This is the name of the job, feel free to change it to better match what you're trying to do!
    # These next lines defines a Docker executors: https://circleci.com/docs/executor-types/
    # You can specify an image from Dockerhub or use one of the convenience images from CircleCI's Developer Hub
    # A list of available CircleCI Docker convenience images are available here: https://circleci.com/developer/images/image/cimg/python
    # The executor is the environment in which the steps below will be executed
    docker:
      - image: condaforge/mambaforge
    # CircleCI will report the results back to your VCS provider.
    steps:
      - checkout
      - run:
          name: Install basic OS pkgs
          command: apt-get update && apt-get -y install curl vim
      - run:
          name: Run Linter (python black)
          command: |
            mamba install black
            black . --check
      - run:
          name: Install abc-env
          command: |
            mamba env create -f workflow/envs/abcenv.yml
      - run:
          name: Run tests
          command: |
            conda run -n abc-env pytest
      - slack/notify:
          branch_pattern: dev,main 
          channel: abc_circleci
          event: fail 
          ignore_errors: true
          template: basic_fail_1 
      - slack/notify:
          branch_pattern: dev,main 
          channel: abc_circleci 
          event: pass 
          ignore_errors: true 
          template: success_tagged_deploy_1

# Invoke jobs via workflows
# See: https://circleci.com/docs/configuration-reference/#workflows
workflows:
  my-workflow:
    jobs:
      - build-and-test:
          context:
            - slack
      
