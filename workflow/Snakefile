import os
import pandas as pd
from snakemake.utils import min_version
min_version("7.0")

configfile: "config/config.yaml"
conda: "mamba"

## load biosamples config file
biosamples_config_file = config["biosamplesTable"]
biosamples_config = pd.read_table(biosamples_config_file, na_values="").fillna("None").set_index("biosample", drop=False)

## get list of biosamples
all_biosamples = list(biosamples_config.index.values)

## get TSS and genefile names for each biosample 
TSS_files = []
gene_files = []
for x in all_biosamples:
	tss_file = config['params_candidate']['genome_tss']
	gene_file = config['params_neighborhoods']['genes']
	if biosamples_config.loc[x, "alt_TSS"] != "None":
		tss_file = biosamples_config.loc[x, 'alt_TSS']
	if biosamples_config.loc[x, "alt_genes"] != "None":
		gene_file = biosamples_config.loc[x, 'alt_genes']
	TSS_files.append(tss_file)
	gene_files.append(gene_file)
				
biosamples_config["TSS"] = TSS_files
biosamples_config["genes"] = gene_files


RESULTS_DIR = config['predictions_results_dir']

def get_accessibility_file(wildcards):
	default_accessibility_feature = biosamples_config.loc[wildcards.biosample, 'default_accessibility_feature']
	return biosamples_config.loc[wildcards.biosample, default_accessibility_feature]

## overall rule to run pipeline
rule all:
	input:
		narrowPeaks_sorted = expand(os.path.join(RESULTS_DIR, "{biosample}", "Peaks", "macs2_peaks.narrowPeak.sorted"), biosample=all_biosamples),
		candidateRegions = expand(os.path.join(RESULTS_DIR, "{biosample}", "Peaks", "macs2_peaks.narrowPeak.sorted.candidateRegions.bed"),
	    biosample=all_biosamples),
		enhancerLists = expand(os.path.join(RESULTS_DIR, "{biosample}", "Neighborhoods", "EnhancerList.txt"),  biosample=all_biosamples),
		allPutative = expand(os.path.join(RESULTS_DIR, "{biosample}", "Predictions", "EnhancerPredictionsAllPutative.txt.gz"), biosample=all_biosamples),
		enhPredictions = expand(os.path.join(RESULTS_DIR, "{biosample}", "Predictions", "EnhancerPredictions.txt"), biosample=all_biosamples),
		allPred = os.path.join(RESULTS_DIR,"AllPredictions.txt.gz"),
		altTSS = TSS_files,
		metricsDirectory = expand(os.path.join(RESULTS_DIR, "{biosample}", "Metrics", "QCSummary.p"), biosample=all_biosamples)

	
## call macs2 -- if multiple accessibility inputs for one biosample, will aggregate into one output
rule call_macs_peaks: 
	input:
		accessibility = get_accessibility_file
	params:
		pval = config['params_macs']['pval'],
		out_dir = config["predictions_results_dir"]
	conda:
		"envs/abcenv.yml"
	output: 
		narrowPeak = os.path.join(RESULTS_DIR, "{biosample}", "Peaks", "macs2_peaks.narrowPeak")
	resources:
		mem_gb=32,
		runtime_hr=6
	shell: 
		""" 
		macs2 callpeak -f AUTO -g hs -p {params.pval} -n macs2 --call-summits --outdir {params.out_dir}/{wildcards.biosample}/Peaks -t {input.accessibility}
		"""

## sort narrowPeaks
rule sort_narrowpeaks:
	input:
		narrowPeak = os.path.join(RESULTS_DIR, "{biosample}", "Peaks", "macs2_peaks.narrowPeak")
	params:
		chrom_sizes = config['params_candidate']['chrom_sizes']
	conda:
		"envs/abcenv.yml"
	output:
		narrowPeakSorted = os.path.join(RESULTS_DIR, "{biosample}", "Peaks", "macs2_peaks.narrowPeak.sorted")
	resources:
		mem_gb=16,
		runtime_hr=6
	shell:
		"""
		# intersect first to remove alternate chromosomes
		bedtools intersect -u -a {input.narrowPeak} -b {params.chrom_sizes}.bed | \
		bedtools sort -faidx {params.chrom_sizes} -i stdin > {output.narrowPeakSorted}
		"""

## call candidate regions
rule call_candidate_regions:
	input:
		narrowPeak = os.path.join(RESULTS_DIR, "{biosample}", "Peaks", "macs2_peaks.narrowPeak.sorted"),
	params:
		accessibility = get_accessibility_file,
		TSS = lambda wildcards: biosamples_config.loc[wildcards.biosample, 'TSS'],
		chrom_sizes = config['params_candidate']['chrom_sizes'],
		regions_blocklist = config['params_candidate']['regions_blocklist'],
		peakExtendFromSummit = config['params_candidate']['peakExtendFromSummit'],
		nStrongestPeak = config['params_candidate']['nStrongestPeaks'],
		threads = 10,
		output_dir = RESULTS_DIR
	conda:
		"envs/abcenv.yml"
	output: 
		candidateRegions = os.path.join(RESULTS_DIR, "{biosample}", "Peaks", "macs2_peaks.narrowPeak.sorted.candidateRegions.bed")
	resources:
		mem_gb=32,
		runtime_hr=6
	shell: 
		"""
		python  workflow/scripts/makeCandidateRegions.py \
			--narrowPeak {input.narrowPeak}\
			--bam {params.accessibility} \
			--outDir {params.output_dir}/{wildcards.biosample}/Peaks \
			--chrom_sizes {params.chrom_sizes} \
			--regions_blocklist {params.regions_blocklist} \
			--regions_includelist {params.TSS} \
			--peakExtendFromSummit {params.peakExtendFromSummit} \
			--nStrongestPeak {params.nStrongestPeak}
		"""

## call neighborhoods
rule call_neighborhoods:
	input:		
		candidateRegions = os.path.join(RESULTS_DIR, "{biosample}", "Peaks", "macs2_peaks.narrowPeak.sorted.candidateRegions.bed"),
	params:
		DHS = lambda wildcards: biosamples_config.loc[wildcards.biosample, 'DHS'] if not biosamples_config.loc[wildcards.biosample, 'DHS']=='None' else '',
		ATAC = lambda wildcards: biosamples_config.loc[wildcards.biosample, 'ATAC'] if not biosamples_config.loc[wildcards.biosample, 'ATAC']=='None' else '',
		default = lambda wildcards: biosamples_config.loc[wildcards.biosample, 'default_accessibility_feature'],
		H3K27ac = lambda wildcards: biosamples_config.loc[wildcards.biosample, 'H3K27ac'] if not biosamples_config.loc[wildcards.biosample, 'H3K27ac']=='None' else '',
		genes = lambda wildcards: biosamples_config.loc[wildcards.biosample, 'genes'],
		ubiquitous_genes = config['params_neighborhoods']['ubiquitous_genes'],
		chrom_sizes = config['params_candidate']['chrom_sizes'],
		qnorm = config['params_neighborhoods']['qnorm'],
	conda:
		"envs/abcenv.yml"
	output: 
		enhList = os.path.join(RESULTS_DIR, "{biosample}", "Neighborhoods", "EnhancerList.txt"),
		geneList = os.path.join(RESULTS_DIR, "{biosample}", "Neighborhoods", "GeneList.txt"),
		neighborhoodDirectory = directory(os.path.join(RESULTS_DIR, "{biosample}", "Neighborhoods")),
	resources:
		mem_gb=200,
		runtime_hr=6
	shell:
		"""
		# get sorted & unique gene list
		# intersect first to remove alternate chromosomes
		bedtools intersect -u -a {params.genes} -b {params.chrom_sizes}.bed | \
		bedtools sort -faidx {params.chrom_sizes} -i stdin | \
		uniq > {params.genes}.sorted.uniq
						
		python  workflow/scripts/run.neighborhoods.py \
			--candidate_enhancer_regions {input.candidateRegions} \
			--DHS {params.DHS} \
			--ATAC {params.ATAC} \
			--default_accessibility_feature {params.default} \
			--chrom_sizes {params.chrom_sizes} \
			--outdir {output.neighborhoodDirectory} \
			--genes {params.genes}.sorted.uniq \
			--ubiquitously_expressed_genes {params.ubiquitous_genes} \
			--qnorm {params.qnorm} \
			--H3K27ac {params.H3K27ac}
		"""
		
### run predictions: takes in EnhancerList.txt and GeneList.txt generated from rule call_neighborhoods above and generates Enhancer-Gene Predictions and links
rule run_predictions:
	input:
		enhancers = os.path.join(RESULTS_DIR, "{biosample}", "Neighborhoods", "EnhancerList.txt"),
		genes = os.path.join(RESULTS_DIR, "{biosample}", "Neighborhoods", "GeneList.txt")
	params:
		cellType = lambda wildcards: wildcards.biosample, 
		output_dir = lambda wildcards: os.path.join(RESULTS_DIR, wildcards.biosample, "Predictions"),
		hic_dir = lambda wildcards: biosamples_config.loc[wildcards.biosample, "HiC_dir"],
		hic_type = lambda wildcards: biosamples_config.loc[wildcards.biosample, "HiC_type"],
		chrom_sizes = config['params_candidate']['chrom_sizes'],
		hic_resolution = config['params_predict']['hic_resolution'],
		threshold = config['params_predict']['threshold'],
		flags = config['params_predict']['flags'],
		gamma = config['params_predict']['hic_gamma'],
		#scale = config['params_predict']['hic_scale'],
		default = lambda wildcards: biosamples_config.loc[wildcards.biosample, 'default_accessibility_feature'],
	conda:
		"envs/abcenv.yml"
	output: 
		allPutative = os.path.join(RESULTS_DIR, "{biosample}", "Predictions", "EnhancerPredictionsAllPutative.txt.gz"),
		enhPredictions = os.path.join(RESULTS_DIR, "{biosample}", "Predictions", "EnhancerPredictions.txt"),
		enhPredictionsFull = os.path.join(RESULTS_DIR, "{biosample}", "Predictions", "EnhancerPredictionsFull.txt"),
	resources:
		mem_gb=128,
		runtime_hr=6
	shell:
		"""
		python  workflow/scripts/predict.py \
			--enhancers {input.enhancers} \
			--outdir {params.output_dir} \
			--HiCdir {params.hic_dir} \
			--hic_type {params.hic_type} \
			--hic_gamma {params.gamma} \
			--default_accessibility_feature {params.default} \
			--chrom_sizes {params.chrom_sizes} \
			--hic_resolution {params.hic_resolution} \
			--threshold {params.threshold} \
			--cellType {params.cellType} \
			--genes {input.genes} \
			{params.flags}
		"""
		#--hic_scale {params.scale}

### generate AllPredictions file
rule make_all_predictions:
	input: 
		predLists = expand(os.path.join(RESULTS_DIR, "{biosample}", "Predictions", "EnhancerPredictions.txt"), biosample=all_biosamples)
	params:
		output_dir = RESULTS_DIR
	conda:
		"envs/abcenv.yml"
	output:
		allPred = os.path.join(RESULTS_DIR,"AllPredictions.txt.gz")
	resources:
		mem_gb=32,
		runtime_hr=6
	shell:
		"""			
		set +o pipefail;
		## make all predictions file 
		printf "chr\tstart\tend\tname\tTargetGene\tTargetGeneTSS\tCellType\tABC.Score\n" > {params.output_dir}/AllPredictions.txt
		for sample in {input.predLists}
		do
			cat $sample | sed 1d >> {params.output_dir}/AllPredictions.txt
		done
		gzip {params.output_dir}/AllPredictions.txt
		"""

rule gen_qc_plots:
	input: 
		candidateRegions = os.path.join(RESULTS_DIR, "{biosample}", "Peaks", "macs2_peaks.narrowPeak.sorted.candidateRegions.bed"),
		neighborhoodDirectory = directory(os.path.join(RESULTS_DIR, "{biosample}", "Neighborhoods")),
		enhPredictionsFull = os.path.join(RESULTS_DIR, "{biosample}", "Predictions", "EnhancerPredictionsFull.txt")
	params:
		output_dir = os.path.join(RESULTS_DIR, "{biosample}", "Metrics")
	conda:
		"envs/abcenv.yml"
	output:
		qc_summary = os.path.join(RESULTS_DIR, "{biosample}", "Metrics", "QCSummary.p")
	resources:
		mem_gb=32,
		runtime_hr=6
	shell:
		"""
		python  workflow/scripts/grabMetrics.py \
			--outdir {params.output_dir} \
			--macs_peaks {input.candidateRegions} \
			--neighborhood_outdir {input.neighborhoodDirectory} \
			--preds_file {input.enhPredictionsFull}
		"""
